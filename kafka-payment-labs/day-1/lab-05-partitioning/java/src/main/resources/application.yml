# Lab 05 - Partitioning Strategies Configuration

kafka:
  # Confluent Cloud connection settings
  bootstrap-servers: ${BOOTSTRAP_SERVERS:localhost:9092}
  security-protocol: SASL_SSL
  sasl-mechanism: PLAIN
  sasl-username: ${SASL_USERNAME}
  sasl-password: ${SASL_PASSWORD}
  
  # Producer settings for partitioning
  producer:
    acks: all
    retries: 3
    linger-ms: 10
    batch-size: 16384
    compression-type: snappy
    max-in-flight-requests-per-connection: 5
    enable-idempotence: true
  
  # Consumer settings for partition analysis
  consumer:
    group-id: partition-analyzer
    auto-offset-reset: earliest
    enable-auto-commit: true
    max-poll-records: 500
    concurrency: 1

# Application settings
app:
  topics:
    payment-requests: payment_requests
  
  # Partitioning demonstration settings
  partitioning:
    message-count: 20
    delay-between-messages: 200
    enable-partition-analysis: true

# Lab-specific settings
lab:
  name: lab-05-partitioning
  version: 1.0.0

# Logging configuration
logging:
  level:
    com.acme.kafka: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Spring Boot settings
spring:
  application:
    name: lab-05-partitioning
  
  # JSON serialization settings
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

# Main class for different scenarios
scenarios:
  custom-partitioner: com.acme.kafka.CustomPartitionerApplication
  keyed-producer: com.acme.kafka.KeyedProducerApplication
  ordered-consumer: com.acme.kafka.OrderedConsumerApplication
  partition-analyzer: com.acme.kafka.PartitionAnalyzerApplication